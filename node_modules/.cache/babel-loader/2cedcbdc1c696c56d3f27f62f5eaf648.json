{"ast":null,"code":"export function BFS(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const queue = [];\n  queue.push(startNode);\n  startNode.isVisited = true;\n  const x = [-1, 1, 0, 0];\n  const y = [0, 0, -1, 1];\n  while (!!queue.length) {\n    let l = queue.length;\n    for (let i = 0; i < l; i++) {\n      const closestNode = queue.shift();\n      if (closestNode.isWall) continue;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      for (let k = 0; k < 4; k++) {\n        const {\n          col,\n          row\n        } = closestNode;\n        let X = row + x[k],\n          Y = col + y[k];\n        if (isSafe(grid.length, grid[0].length, X, Y) && !grid[X][Y].isVisited) {\n          grid[X][Y].previousNode = closestNode;\n          grid[X][Y].isVisited = true;\n          queue.push(grid[X][Y]);\n        }\n      }\n    }\n  }\n  return visitedNodesInOrder;\n}\n_c = BFS;\nfunction isSafe(n, m, x, y) {\n  return x >= 0 && x < n && y >= 0 && y < m;\n}\nexport function getNodesInPathOfBFS(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\nvar _c;\n$RefreshReg$(_c, \"BFS\");","map":{"version":3,"names":["BFS","grid","startNode","finishNode","visitedNodesInOrder","queue","push","isVisited","x","y","length","l","i","closestNode","shift","isWall","k","col","row","X","Y","isSafe","previousNode","_c","n","m","getNodesInPathOfBFS","nodesInShortestPathOrder","currentNode","unshift","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/ShortestPath/Path-Finding-visualiser/src/algorithms/breadthFirstSearch.js"],"sourcesContent":["export function BFS(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const queue = [];\r\n  queue.push(startNode);\r\n  startNode.isVisited = true;\r\n  const x = [-1, 1, 0, 0];\r\n  const y = [0, 0, -1, 1];\r\n  while (!!queue.length) {\r\n    let l = queue.length;\r\n    for (let i = 0; i < l; i++) {\r\n      const closestNode = queue.shift();\r\n      if (closestNode.isWall) continue;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      for (let k = 0; k < 4; k++) {\r\n        const { col, row } = closestNode;\r\n        let X = row + x[k],\r\n          Y = col + y[k];\r\n        if (\r\n          isSafe(grid.length, grid[0].length, X, Y) &&\r\n          !grid[X][Y].isVisited\r\n        ) {\r\n          grid[X][Y].previousNode = closestNode;\r\n          grid[X][Y].isVisited = true;\r\n          queue.push(grid[X][Y]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction isSafe(n, m, x, y) {\r\n  return x >= 0 && x < n && y >= 0 && y < m;\r\n}\r\n\r\nexport function getNodesInPathOfBFS(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,GAAGA,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAE;EAC/C,MAAMC,mBAAmB,GAAG,EAAE;EAC9B,MAAMC,KAAK,GAAG,EAAE;EAChBA,KAAK,CAACC,IAAI,CAACJ,SAAS,CAAC;EACrBA,SAAS,CAACK,SAAS,GAAG,IAAI;EAC1B,MAAMC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACvB,MAAMC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACvB,OAAO,CAAC,CAACJ,KAAK,CAACK,MAAM,EAAE;IACrB,IAAIC,CAAC,GAAGN,KAAK,CAACK,MAAM;IACpB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,CAAC,EAAEC,CAAC,EAAE,EAAE;MAC1B,MAAMC,WAAW,GAAGR,KAAK,CAACS,KAAK,CAAC,CAAC;MACjC,IAAID,WAAW,CAACE,MAAM,EAAE;MACxBX,mBAAmB,CAACE,IAAI,CAACO,WAAW,CAAC;MACrC,IAAIA,WAAW,KAAKV,UAAU,EAAE,OAAOC,mBAAmB;MAC1D,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,MAAM;UAAEC,GAAG;UAAEC;QAAI,CAAC,GAAGL,WAAW;QAChC,IAAIM,CAAC,GAAGD,GAAG,GAAGV,CAAC,CAACQ,CAAC,CAAC;UAChBI,CAAC,GAAGH,GAAG,GAAGR,CAAC,CAACO,CAAC,CAAC;QAChB,IACEK,MAAM,CAACpB,IAAI,CAACS,MAAM,EAAET,IAAI,CAAC,CAAC,CAAC,CAACS,MAAM,EAAES,CAAC,EAAEC,CAAC,CAAC,IACzC,CAACnB,IAAI,CAACkB,CAAC,CAAC,CAACC,CAAC,CAAC,CAACb,SAAS,EACrB;UACAN,IAAI,CAACkB,CAAC,CAAC,CAACC,CAAC,CAAC,CAACE,YAAY,GAAGT,WAAW;UACrCZ,IAAI,CAACkB,CAAC,CAAC,CAACC,CAAC,CAAC,CAACb,SAAS,GAAG,IAAI;UAC3BF,KAAK,CAACC,IAAI,CAACL,IAAI,CAACkB,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;QACxB;MACF;IACF;EACF;EACA,OAAOhB,mBAAmB;AAC5B;AAACmB,EAAA,GA9BevB,GAAG;AAgCnB,SAASqB,MAAMA,CAACG,CAAC,EAAEC,CAAC,EAAEjB,CAAC,EAAEC,CAAC,EAAE;EAC1B,OAAOD,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGgB,CAAC,IAAIf,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGgB,CAAC;AAC3C;AAEA,OAAO,SAASC,mBAAmBA,CAACvB,UAAU,EAAE;EAC9C,MAAMwB,wBAAwB,GAAG,EAAE;EACnC,IAAIC,WAAW,GAAGzB,UAAU;EAC5B,OAAOyB,WAAW,KAAK,IAAI,EAAE;IAC3BD,wBAAwB,CAACE,OAAO,CAACD,WAAW,CAAC;IAC7CA,WAAW,GAAGA,WAAW,CAACN,YAAY;EACxC;EACA,OAAOK,wBAAwB;AACjC;AAAC,IAAAJ,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}